<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="visualt_8h" kind="file" language="C++">
    <compoundname>visualt.h</compoundname>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stdint.h</includes>
    <incdepgraph>
      <node id="2">
        <label>stdbool.h</label>
      </node>
      <node id="3">
        <label>stdint.h</label>
      </node>
      <node id="1">
        <label>include/visualt/visualt.h</label>
        <link refid="visualt_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structvt_char_map" prot="public">vtCharMap</innerclass>
    <innerclass refid="structvt_obj" prot="public">vtObj</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="visualt_8h_1a3c510ca1baa96553da5ce0c6ef8617f2" prot="public" static="no">
        <name>VISUALT_INCLUDE_VISUALT_VISUALT_H_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="8" column="9" bodyfile="include/visualt/visualt.h" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="visualt_8h_1a4d910c34685df134f76d07e8e3fed066" prot="public" static="no">
        <name>LTCHAR</name>
        <initializer>*(<ref refid="visualt_8h_1a602a1973d04b95bac5e9fa013bc2fac9" kindref="member">VTChar</ref> *const)</initializer>
        <briefdescription>
<para>A helper macro to cast a literal glyph to a VTChar. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">vtFill(&amp;obj,<sp/>LTCHAR&quot;â†º&quot;);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="56" column="9" bodyfile="include/visualt/visualt.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="visualt_8h_1a5a4fa955a24d632e4fbe7c0a59f582ea" prot="public" static="no">
        <name>LTSTR</name>
        <initializer>(<ref refid="visualt_8h_1a42e57e589e33ac6946e23463ff1127a3" kindref="member">VTStr</ref>)</initializer>
        <briefdescription>
<para>A helper macro to cast a literal string to VTStr. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">vtSetText(&amp;obj,<sp/>LTSTR&quot;hello<sp/>world&quot;);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="64" column="9" bodyfile="include/visualt/visualt.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="visualt_8h_1af7d746804cb50281a3d4305ce444fd83" prot="public" static="no">
        <name>LTSTRS</name>
        <initializer>(<ref refid="visualt_8h_1ab9573b4fed5c30e89bcfd9c41c2939fe" kindref="member">VTStrs</ref>)(char const *const [])</initializer>
        <briefdescription>
<para>A helper macro to cast a literal array of strings to VTStrs. </para>
        </briefdescription>
        <detaileddescription>
<para>The main use case is when you want to initialize an Object from one or more literal strings: <programlisting><codeline><highlight class="normal">vtInitializeString(&amp;obj,<sp/>3,<sp/>LTSTRS{&quot;spriteA&quot;,&quot;spriteB&quot;,&quot;spriteC&quot;});</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="74" column="9" bodyfile="include/visualt/visualt.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="visualt_8h_1ab7dde18a67dc2676fec5e6049771811f" prot="public" static="no">
        <name>LTSIZES</name>
        <initializer>(<ref refid="visualt_8h_1a83b986c4c0e9034fe84e6de8e022cddd" kindref="member">VTSizes</ref>)(unsigned const int [][2])</initializer>
        <briefdescription>
<para>A helper macro to cast a literal array of integer pairs to VTSizes. </para>
        </briefdescription>
        <detaileddescription>
<para>The main use case is when you want to initialize a blank Object given its sprites sizes: <programlisting><codeline><highlight class="normal">vtInitializeBlank(&amp;canvas,<sp/>2,<sp/>LTSIZES{{10,<sp/>5},{5,<sp/>10}});</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="84" column="9" bodyfile="include/visualt/visualt.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="visualt_8h_1a454761c2c2dbbebdb0ba61c99e6b4c08" prot="public" static="no">
        <name>LTOBJS</name>
        <initializer>(<ref refid="visualt_8h_1ac4debf683d87b491f2f57af7eceb575b" kindref="member">VTObjs</ref>)(struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> const *const [])</initializer>
        <briefdescription>
<para>A helper macro to cast a literal array of Objects to VTObjs. </para>
        </briefdescription>
        <detaileddescription>
<para>The main use case is when you want to render a group of Objects: <programlisting><codeline><highlight class="normal">vtRender(&amp;canvas,<sp/>3,<sp/>LTOBJS{&amp;objA,<sp/>&amp;objB,<sp/>&amp;objC});</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="94" column="9" bodyfile="include/visualt/visualt.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="visualt_8h_1a602a1973d04b95bac5e9fa013bc2fac9" prot="public" static="no">
        <type>uint32_t</type>
        <definition>typedef uint32_t VTChar</definition>
        <argsstring></argsstring>
        <name>VTChar</name>
        <briefdescription>
<para>Represents a UTF8-encoded read-only codepoint. </para>
        </briefdescription>
        <detaileddescription>
<para>This is what the API expects when passing a single UTF8-encoded codepoint. Like in <bold>LINK</bold> <linebreak/>
Being a fully UTF8 compatible library, VisualT stores UTF8 encoded characters in 4 Bytes <computeroutput>uint32_t</computeroutput> variables. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="19" column="18" bodyfile="include/visualt/visualt.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="visualt_8h_1a42e57e589e33ac6946e23463ff1127a3" prot="public" static="no">
        <type>uint8_t const  *</type>
        <definition>typedef uint8_t const* VTStr</definition>
        <argsstring></argsstring>
        <name>VTStr</name>
        <briefdescription>
<para>A pointer to a UTF8-encoded read-only string. </para>
        </briefdescription>
        <detaileddescription>
<para>This is what the API expects when passing an UTF8-encoded string. Like in <bold>LINK</bold> <linebreak/>
It&apos;s just an alias that makes things easier to read. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="27" column="23" bodyfile="include/visualt/visualt.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="visualt_8h_1ab9573b4fed5c30e89bcfd9c41c2939fe" prot="public" static="no">
        <type>uint8_t const  *const  *</type>
        <definition>typedef uint8_t const* const* VTStrs</definition>
        <argsstring></argsstring>
        <name>VTStrs</name>
        <briefdescription>
<para>A pointer to a read-only array of VTStr. </para>
        </briefdescription>
        <detaileddescription>
<para>This is what the API expects when passing an array of UTF8-encoded strings. Like in <bold>LINK</bold> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="34" column="29" bodyfile="include/visualt/visualt.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="visualt_8h_1a83b986c4c0e9034fe84e6de8e022cddd" prot="public" static="no">
        <type>unsigned int const (*</type>
        <definition>typedef unsigned int const(* VTSizes)[2]</definition>
        <argsstring>)[2]</argsstring>
        <name>VTSizes</name>
        <briefdescription>
<para>A pointer to a read-only pair of positive integers. </para>
        </briefdescription>
        <detaileddescription>
<para>This is what the API expects when passing the size of something. Like in<verbatim>embed:rst:inline :func:`vtInitializeBlank` </verbatim>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="41" column="22" bodyfile="include/visualt/visualt.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="visualt_8h_1ac4debf683d87b491f2f57af7eceb575b" prot="public" static="no">
        <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> const  *const  *</type>
        <definition>typedef struct vtObj const* const* VTObjs</definition>
        <argsstring></argsstring>
        <name>VTObjs</name>
        <briefdescription>
<para>A pointer to a read-only array of read-only Objects. </para>
        </briefdescription>
        <detaileddescription>
<para>This is what the API expects when passing an array of Objects. Like in <bold>LINK</bold> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="48" column="26" bodyfile="include/visualt/visualt.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="visualt_8h_1a3b191599949622d35802d29cc8ab0562" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vtAbout</definition>
        <argsstring>()</argsstring>
        <name>vtAbout</name>
        <briefdescription>
<para>Prints info about VisualT. </para>
        </briefdescription>
        <detaileddescription>
<para>Prints the <bold>version</bold>, <bold>build date</bold>, and <bold>GitHub website</bold> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="116" column="6" declfile="include/visualt/visualt.h" declline="116" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="visualt_8h_1a70cdf64b9b8c1617d6ec335fd16fdfea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vtInitializeBlank</definition>
        <argsstring>(struct vtObj *obj, unsigned int sizesLength, VTSizes sizes)</argsstring>
        <name>vtInitializeBlank</name>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>sizesLength</declname>
        </param>
        <param>
          <type><ref refid="visualt_8h_1a83b986c4c0e9034fe84e6de8e022cddd" kindref="member">VTSizes</ref></type>
          <declname>sizes</declname>
        </param>
        <briefdescription>
<para>Initializes <computeroutput>obj</computeroutput> to a blank Object with <computeroutput>sizesLength</computeroutput> Sprites of <computeroutput>sizes</computeroutput> size. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>the Object to initialize </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sizesLength</parametername>
</parameternamelist>
<parameterdescription>
<para>the length of <computeroutput>sizes</computeroutput>, equivalent to the number of Sprites </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sizes</parametername>
</parameternamelist>
<parameterdescription>
<para>an array of pairs, each pair represent the dimension of a sprite </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="126" column="6" declfile="include/visualt/visualt.h" declline="126" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="visualt_8h_1a231ce35e9f9238e050b8d8ee8f11c7ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vtInitializeArray</definition>
        <argsstring>(struct vtObj *obj, VTChar const *v)</argsstring>
        <name>vtInitializeArray</name>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="visualt_8h_1a602a1973d04b95bac5e9fa013bc2fac9" kindref="member">VTChar</ref> const *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="127" column="6" declfile="include/visualt/visualt.h" declline="127" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="visualt_8h_1a8b547611e90982e1d8b3f33891ef4057" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vtInitializeFile</definition>
        <argsstring>(struct vtObj *obj, char const *path)</argsstring>
        <name>vtInitializeFile</name>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="128" column="6" declfile="include/visualt/visualt.h" declline="128" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="visualt_8h_1aeec5cc249959c6a0059ed486e9a52ffd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vtInitializeString</definition>
        <argsstring>(struct vtObj *obj, unsigned int utf8StringsLength, VTStrs utf8Strings)</argsstring>
        <name>vtInitializeString</name>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>utf8StringsLength</declname>
        </param>
        <param>
          <type><ref refid="visualt_8h_1ab9573b4fed5c30e89bcfd9c41c2939fe" kindref="member">VTStrs</ref></type>
          <declname>utf8Strings</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="129" column="6" declfile="include/visualt/visualt.h" declline="129" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="visualt_8h_1aa9f990cb00a106015047aaebaffdf87c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vtInitializeObj</definition>
        <argsstring>(struct vtObj *obj, struct vtObj const *src)</argsstring>
        <name>vtInitializeObj</name>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> const *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="130" column="6" declfile="include/visualt/visualt.h" declline="130" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="visualt_8h_1a5150c76e2c78cf735cca75fd61e80064" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vtRelease</definition>
        <argsstring>(unsigned int objsLength, VTObjs objs)</argsstring>
        <name>vtRelease</name>
        <param>
          <type>unsigned int</type>
          <declname>objsLength</declname>
        </param>
        <param>
          <type><ref refid="visualt_8h_1ac4debf683d87b491f2f57af7eceb575b" kindref="member">VTObjs</ref></type>
          <declname>objs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="131" column="6" declfile="include/visualt/visualt.h" declline="131" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="visualt_8h_1acc4edffb57dc3ebea733ac041d914639" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vtCloneSprite</definition>
        <argsstring>(struct vtObj const *dest, unsigned int spriteDest, struct vtObj const *src, unsigned int spriteSrc)</argsstring>
        <name>vtCloneSprite</name>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> const *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>spriteDest</declname>
        </param>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> const *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>spriteSrc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="132" column="6" declfile="include/visualt/visualt.h" declline="132" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="visualt_8h_1a7ff545b135edf7600f36751dc6af4076" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vtResize</definition>
        <argsstring>(struct vtObj *obj, unsigned int width, unsigned int height)</argsstring>
        <name>vtResize</name>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>height</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="133" column="6" declfile="include/visualt/visualt.h" declline="133" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="visualt_8h_1acf9abbd95ae55af11b26f7f97f6025ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vtRender</definition>
        <argsstring>(struct vtObj const *canvas, unsigned int objsLength, VTObjs objs)</argsstring>
        <name>vtRender</name>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> const *</type>
          <declname>canvas</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>objsLength</declname>
        </param>
        <param>
          <type><ref refid="visualt_8h_1ac4debf683d87b491f2f57af7eceb575b" kindref="member">VTObjs</ref></type>
          <declname>objs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="135" column="6" declfile="include/visualt/visualt.h" declline="135" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="visualt_8h_1a9fcbacd44fc799060623f1e7cda15d49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vtStamp</definition>
        <argsstring>(struct vtObj const *canvas, unsigned int objsLength, VTObjs objs)</argsstring>
        <name>vtStamp</name>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> const *</type>
          <declname>canvas</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>objsLength</declname>
        </param>
        <param>
          <type><ref refid="visualt_8h_1ac4debf683d87b491f2f57af7eceb575b" kindref="member">VTObjs</ref></type>
          <declname>objs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="136" column="6" declfile="include/visualt/visualt.h" declline="136" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="visualt_8h_1a0e265109fcddc5eb31d1e8d240b2d52b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vtPrint</definition>
        <argsstring>(struct vtObj const *canvas, bool border)</argsstring>
        <name>vtPrint</name>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> const *</type>
          <declname>canvas</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>border</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="137" column="6" declfile="include/visualt/visualt.h" declline="137" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="visualt_8h_1aa19b39ff12ba9e86e44ffc41255efec7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int vtPrintToString</definition>
        <argsstring>(struct vtObj const *canvas, bool border, uint8_t **utf8String)</argsstring>
        <name>vtPrintToString</name>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> const *</type>
          <declname>canvas</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>border</declname>
        </param>
        <param>
          <type>uint8_t **</type>
          <declname>utf8String</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="138" column="14" declfile="include/visualt/visualt.h" declline="138" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="visualt_8h_1a7be24a5ea2c1183acf50cf8017385e2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int vtSprites</definition>
        <argsstring>(struct vtObj const *obj)</argsstring>
        <name>vtSprites</name>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> const *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="140" column="14" declfile="include/visualt/visualt.h" declline="140" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="visualt_8h_1a65851bc78f625546cbf2bf42accb697e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int vtSpriteInd</definition>
        <argsstring>(struct vtObj const *obj)</argsstring>
        <name>vtSpriteInd</name>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> const *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="141" column="14" declfile="include/visualt/visualt.h" declline="141" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="visualt_8h_1ac679af5f011fe04748aeda23be601caa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vtNextSprite</definition>
        <argsstring>(struct vtObj *obj)</argsstring>
        <name>vtNextSprite</name>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="142" column="6" declfile="include/visualt/visualt.h" declline="142" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="visualt_8h_1a8678a982f54a9eb163079cd5d68bd5eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vtPrecSprite</definition>
        <argsstring>(struct vtObj *obj)</argsstring>
        <name>vtPrecSprite</name>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="143" column="6" declfile="include/visualt/visualt.h" declline="143" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="visualt_8h_1addf2d2ee232ce873006b594065133e38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vtSetSprite</definition>
        <argsstring>(struct vtObj *obj, unsigned int sprite)</argsstring>
        <name>vtSetSprite</name>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>sprite</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="144" column="6" declfile="include/visualt/visualt.h" declline="144" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="visualt_8h_1ab267ac23b3179c2f57cb788fb1e8da01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int vtWidth</definition>
        <argsstring>(struct vtObj const *obj)</argsstring>
        <name>vtWidth</name>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> const *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="145" column="14" declfile="include/visualt/visualt.h" declline="145" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="visualt_8h_1aded2f08831e9fa1d95df33bfc546a5ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int vtHeight</definition>
        <argsstring>(struct vtObj const *obj)</argsstring>
        <name>vtHeight</name>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> const *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="146" column="14" declfile="include/visualt/visualt.h" declline="146" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="visualt_8h_1a43c141e0737e76c42d7ddcdc0fc0a30c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vtSetText</definition>
        <argsstring>(struct vtObj *obj, VTStr utf8Text)</argsstring>
        <name>vtSetText</name>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="visualt_8h_1a42e57e589e33ac6946e23463ff1127a3" kindref="member">VTStr</ref></type>
          <declname>utf8Text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="147" column="6" declfile="include/visualt/visualt.h" declline="147" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="visualt_8h_1a548bd9e1dc57456fc4117a47aa8e2efe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vtClear</definition>
        <argsstring>(struct vtObj const *canvas)</argsstring>
        <name>vtClear</name>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> const *</type>
          <declname>canvas</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="148" column="6" declfile="include/visualt/visualt.h" declline="148" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="visualt_8h_1ae9a5b6cf5aa594658e6ea1041a8188fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vtFill</definition>
        <argsstring>(struct vtObj const *canvas, VTChar fillChar)</argsstring>
        <name>vtFill</name>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> const *</type>
          <declname>canvas</declname>
        </param>
        <param>
          <type><ref refid="visualt_8h_1a602a1973d04b95bac5e9fa013bc2fac9" kindref="member">VTChar</ref></type>
          <declname>fillChar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="149" column="6" declfile="include/visualt/visualt.h" declline="149" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="visualt_8h_1a896d0a0aac6d95749f3a71b689f17e2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vtOverlay</definition>
        <argsstring>(struct vtObj const *dest, unsigned int spriteDest, struct vtObj const *src, unsigned int spriteSrc)</argsstring>
        <name>vtOverlay</name>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> const *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>spriteDest</declname>
        </param>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> const *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>spriteSrc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="150" column="6" declfile="include/visualt/visualt.h" declline="150" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="visualt_8h_1a4e2b983475a6afb2bebc3f67be80fec8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vtPrintAxes</definition>
        <argsstring>(struct vtObj const *canvas)</argsstring>
        <name>vtPrintAxes</name>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> const *</type>
          <declname>canvas</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="151" column="6" declfile="include/visualt/visualt.h" declline="151" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="visualt_8h_1aa11004782a4d884a7b5201771208be7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vtVisible</definition>
        <argsstring>(struct vtObj const *obj)</argsstring>
        <name>vtVisible</name>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> const *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="153" column="6" declfile="include/visualt/visualt.h" declline="153" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="visualt_8h_1a95f6e58d08cf52cffad9f850f32c511d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vtShow</definition>
        <argsstring>(struct vtObj *obj)</argsstring>
        <name>vtShow</name>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="154" column="6" declfile="include/visualt/visualt.h" declline="154" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="visualt_8h_1a17e6754cc15b5824b12b17531909da91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vtHide</definition>
        <argsstring>(struct vtObj *obj)</argsstring>
        <name>vtHide</name>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="155" column="6" declfile="include/visualt/visualt.h" declline="155" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="visualt_8h_1a7a539f9242884903191779503a141565" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vtSetVisibility</definition>
        <argsstring>(struct vtObj *obj, bool visible)</argsstring>
        <name>vtSetVisibility</name>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>visible</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="156" column="6" declfile="include/visualt/visualt.h" declline="156" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="visualt_8h_1accd3cf88a247c7dea5dbcbb8529376b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="visualt_8h_1a602a1973d04b95bac5e9fa013bc2fac9" kindref="member">VTChar</ref></type>
        <definition>VTChar vtPenChar</definition>
        <argsstring>(struct vtObj const *obj)</argsstring>
        <name>vtPenChar</name>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> const *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="158" column="8" declfile="include/visualt/visualt.h" declline="158" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="visualt_8h_1a41ead62d1484573edb55f88464feb0d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned short</type>
        <definition>unsigned short vtPenSize</definition>
        <argsstring>(struct vtObj const *obj)</argsstring>
        <name>vtPenSize</name>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> const *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="159" column="16" declfile="include/visualt/visualt.h" declline="159" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="visualt_8h_1a25ea4dc3b9d4ddfe6d75c7855bc30b7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vtSetPenSize</definition>
        <argsstring>(struct vtObj *obj, unsigned short size)</argsstring>
        <name>vtSetPenSize</name>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>unsigned short</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="160" column="6" declfile="include/visualt/visualt.h" declline="160" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="visualt_8h_1ab05d48acc3dffdb2a1c0f5c68c4dc9f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vtSetPenChar</definition>
        <argsstring>(struct vtObj *obj, VTChar penChar)</argsstring>
        <name>vtSetPenChar</name>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="visualt_8h_1a602a1973d04b95bac5e9fa013bc2fac9" kindref="member">VTChar</ref></type>
          <declname>penChar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="161" column="6" declfile="include/visualt/visualt.h" declline="161" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="visualt_8h_1aef9f8ec0034d51314cc63965b93893e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vtXPosition</definition>
        <argsstring>(struct vtObj const *obj)</argsstring>
        <name>vtXPosition</name>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> const *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="163" column="5" declfile="include/visualt/visualt.h" declline="163" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="visualt_8h_1a4ae9daa23d6b145873c961324034015f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vtYPosition</definition>
        <argsstring>(struct vtObj const *obj)</argsstring>
        <name>vtYPosition</name>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> const *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="164" column="5" declfile="include/visualt/visualt.h" declline="164" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="visualt_8h_1a7e15e58c9594f998a5aaa17d3de20174" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vtGotoXY</definition>
        <argsstring>(struct vtObj const *canvas, struct vtObj *obj, int x, int y)</argsstring>
        <name>vtGotoXY</name>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> const *</type>
          <declname>canvas</declname>
        </param>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="165" column="6" declfile="include/visualt/visualt.h" declline="165" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="visualt_8h_1a01cfc00945d8f61dbb057678144c8294" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vtGotoX</definition>
        <argsstring>(struct vtObj const *canvas, struct vtObj *obj, int x)</argsstring>
        <name>vtGotoX</name>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> const *</type>
          <declname>canvas</declname>
        </param>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="166" column="6" declfile="include/visualt/visualt.h" declline="166" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="visualt_8h_1a3cba75eafb468ad3cd67fbd636499fa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vtGotoY</definition>
        <argsstring>(struct vtObj const *canvas, struct vtObj *obj, int y)</argsstring>
        <name>vtGotoY</name>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> const *</type>
          <declname>canvas</declname>
        </param>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="167" column="6" declfile="include/visualt/visualt.h" declline="167" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="visualt_8h_1a9a5fdeea4ce3a38160843d399f5075a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vtChangeX</definition>
        <argsstring>(struct vtObj const *canvas, struct vtObj *obj, int x)</argsstring>
        <name>vtChangeX</name>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> const *</type>
          <declname>canvas</declname>
        </param>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="168" column="6" declfile="include/visualt/visualt.h" declline="168" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="visualt_8h_1aa1834dc6ce226040cee575635d4e233d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vtChangeY</definition>
        <argsstring>(struct vtObj const *canvas, struct vtObj *obj, int y)</argsstring>
        <name>vtChangeY</name>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> const *</type>
          <declname>canvas</declname>
        </param>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="169" column="6" declfile="include/visualt/visualt.h" declline="169" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="visualt_8h_1ad6228a287faadb7265e82b7b686a9e31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vtAlign</definition>
        <argsstring>(struct vtObj *obj, unsigned char position)</argsstring>
        <name>vtAlign</name>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>position</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="170" column="6" declfile="include/visualt/visualt.h" declline="170" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="visualt_8h_1ad905824055b15c8587130fcf21fa78a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vtIsTouching</definition>
        <argsstring>(struct vtObj const *canvas, struct vtObj const *obj, unsigned int objsLength, VTObjs objs)</argsstring>
        <name>vtIsTouching</name>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> const *</type>
          <declname>canvas</declname>
        </param>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> const *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>objsLength</declname>
        </param>
        <param>
          <type><ref refid="visualt_8h_1ac4debf683d87b491f2f57af7eceb575b" kindref="member">VTObjs</ref></type>
          <declname>objs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="171" column="6" declfile="include/visualt/visualt.h" declline="171" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="visualt_8h_1a86d08f92e3ee37e49252d2fd4d8e6d4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vtIsTouchingChar</definition>
        <argsstring>(struct vtObj const *canvas, struct vtObj const *obj, VTChar character)</argsstring>
        <name>vtIsTouchingChar</name>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> const *</type>
          <declname>canvas</declname>
        </param>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> const *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="visualt_8h_1a602a1973d04b95bac5e9fa013bc2fac9" kindref="member">VTChar</ref></type>
          <declname>character</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="172" column="6" declfile="include/visualt/visualt.h" declline="172" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="visualt_8h_1a85b30029ef6c56e367039709c2315196" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool vtIsOutside</definition>
        <argsstring>(struct vtObj const *canvas, struct vtObj const *obj)</argsstring>
        <name>vtIsOutside</name>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> const *</type>
          <declname>canvas</declname>
        </param>
        <param>
          <type>struct <ref refid="structvt_obj" kindref="compound">vtObj</ref> const *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/visualt/visualt.h" line="173" column="6" declfile="include/visualt/visualt.h" declline="173" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The VisualT header. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="6"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>VISUALT_INCLUDE_VISUALT_VISUALT_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VISUALT_INCLUDE_VISUALT_VISUALT_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="visualt_8h_1a602a1973d04b95bac5e9fa013bc2fac9" kindref="member">VTChar</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint8_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="visualt_8h_1a42e57e589e33ac6946e23463ff1127a3" kindref="member">VTStr</ref>;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint8_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="visualt_8h_1ab9573b4fed5c30e89bcfd9c41c2939fe" kindref="member">VTStrs</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>(*VTSizes)[2];</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/>const<sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="visualt_8h_1ac4debf683d87b491f2f57af7eceb575b" kindref="member">VTObjs</ref>;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor">#define<sp/>LTCHAR<sp/>*(VTChar<sp/>*const)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor">#define<sp/>LTSTR<sp/>(VTStr)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor">#define<sp/>LTSTRS<sp/>(VTStrs)(char<sp/>const<sp/>*const<sp/>[])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="preprocessor">#define<sp/>LTSIZES<sp/>(VTSizes)(unsigned<sp/>const<sp/>int<sp/>[][2])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="preprocessor">#define<sp/>LTOBJS<sp/>(VTObjs)(struct<sp/>vtObj<sp/>const<sp/>*const<sp/>[])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="structvt_char_map" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structvt_char_map" kindref="compound">vtCharMap</ref><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="visualt_8h_1a602a1973d04b95bac5e9fa013bc2fac9" kindref="member">VTChar</ref><sp/>*chars;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/>height;</highlight></codeline>
<codeline lineno="99"><highlight class="normal">};</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="structvt_obj" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structvt_char_map" kindref="compound">vtCharMap</ref><sp/>*sprites,<sp/>*currentSprite;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="visualt_8h_1a602a1973d04b95bac5e9fa013bc2fac9" kindref="member">VTChar</ref><sp/>penChar;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>penSize;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>visible;</highlight></codeline>
<codeline lineno="108"><highlight class="normal">};</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">//----MISC----</highlight></codeline>
<codeline lineno="116"><highlight class="comment"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="visualt_8h_1a3b191599949622d35802d29cc8ab0562" kindref="member">vtAbout</ref>();</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="visualt_8h_1a70cdf64b9b8c1617d6ec335fd16fdfea" kindref="member">vtInitializeBlank</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/>*obj,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sizesLength,<sp/><ref refid="visualt_8h_1a83b986c4c0e9034fe84e6de8e022cddd" kindref="member">VTSizes</ref><sp/>sizes);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vtInitializeArray(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/>*obj,<sp/><ref refid="visualt_8h_1a602a1973d04b95bac5e9fa013bc2fac9" kindref="member">VTChar</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*v);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vtInitializeFile(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/>*obj,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*path);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vtInitializeString(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/>*obj,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>utf8StringsLength,<sp/><ref refid="visualt_8h_1ab9573b4fed5c30e89bcfd9c41c2939fe" kindref="member">VTStrs</ref><sp/>utf8Strings);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vtInitializeObj(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/>*obj,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*src);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vtRelease(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>objsLength,<sp/><ref refid="visualt_8h_1ac4debf683d87b491f2f57af7eceb575b" kindref="member">VTObjs</ref><sp/>objs);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vtCloneSprite(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*dest,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>spriteDest,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>spriteSrc);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vtResize(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/>*obj,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">//----REFRESH----</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vtRender(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*canvas,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>objsLength,<sp/><ref refid="visualt_8h_1ac4debf683d87b491f2f57af7eceb575b" kindref="member">VTObjs</ref><sp/>objs);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vtStamp(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*canvas,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>objsLength,<sp/><ref refid="visualt_8h_1ac4debf683d87b491f2f57af7eceb575b" kindref="member">VTObjs</ref><sp/>objs);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vtPrint(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*canvas,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>border);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vtPrintToString(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*canvas,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>border,<sp/>uint8_t<sp/>**utf8String);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">//----SPRITE----</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vtSprites(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*obj);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vtSpriteInd(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*obj);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vtNextSprite(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/>*obj);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vtPrecSprite(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/>*obj);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vtSetSprite(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/>*obj,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sprite);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vtWidth(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*obj);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vtHeight(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*obj);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vtSetText(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/>*obj,<sp/><ref refid="visualt_8h_1a42e57e589e33ac6946e23463ff1127a3" kindref="member">VTStr</ref><sp/>utf8Text);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vtClear(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*canvas);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vtFill(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*canvas,<sp/><ref refid="visualt_8h_1a602a1973d04b95bac5e9fa013bc2fac9" kindref="member">VTChar</ref><sp/>fillChar);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vtOverlay(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*dest,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>spriteDest,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>spriteSrc);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vtPrintAxes(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*canvas);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">//----OBJ----</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>vtVisible(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*obj);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vtShow(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/>*obj);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vtHide(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/>*obj);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vtSetVisibility(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/>*obj,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>visible);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//----PEN----</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><ref refid="visualt_8h_1a602a1973d04b95bac5e9fa013bc2fac9" kindref="member">VTChar</ref><sp/>vtPenChar(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*obj);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>vtPenSize(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*obj);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vtSetPenSize(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/>*obj,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vtSetPenChar(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/>*obj,<sp/><ref refid="visualt_8h_1a602a1973d04b95bac5e9fa013bc2fac9" kindref="member">VTChar</ref><sp/>penChar);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">//----MOVE----</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vtXPosition(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*obj);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vtYPosition(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*obj);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vtGotoXY(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*canvas,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/>*obj,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vtGotoX(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*canvas,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/>*obj,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vtGotoY(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*canvas,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/>*obj,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vtChangeX(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*canvas,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/>*obj,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vtChangeY(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*canvas,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/>*obj,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vtAlign(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/>*obj,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>position);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>vtIsTouching(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*canvas,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*obj,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>objsLength,<sp/><ref refid="visualt_8h_1ac4debf683d87b491f2f57af7eceb575b" kindref="member">VTObjs</ref><sp/>objs);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>vtIsTouchingChar(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*canvas,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*obj,<sp/><ref refid="visualt_8h_1a602a1973d04b95bac5e9fa013bc2fac9" kindref="member">VTChar</ref><sp/>character);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>vtIsOutside(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*canvas,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvt_obj" kindref="compound">vtObj</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*obj);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">//----MISC----</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>free<sp/>a<sp/>dynamic<sp/>2d<sp/>array<sp/>mna<sp/>of<sp/>width<sp/>width</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment">//----POINTERS----</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>refer<sp/>to<sp/>an<sp/>Object&apos;s<sp/>INDex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>group<sp/>&quot;n&quot;<sp/>objects<sp/>by<sp/>passing<sp/>their<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>delete<sp/>the<sp/>data<sp/>contained<sp/>on<sp/>a<sp/>group;<sp/>now<sp/>you<sp/>can<sp/>reuse<sp/>the<sp/>group</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment">//----GETTERS----</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>Get<sp/>the<sp/>Number<sp/>of<sp/>Objects<sp/>loaded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>Get<sp/>the<sp/>Object&apos;s<sp/>INDex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>Get<sp/>the<sp/>Object&apos;s<sp/>NAME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>Get<sp/>the<sp/>Object&apos;s<sp/>Sprite<sp/>Number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>Get<sp/>the<sp/>Object&apos;s<sp/>Sprite<sp/>X<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>Get<sp/>the<sp/>Object&apos;s<sp/>Sprite<sp/>Y<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment">//----INITIALIZATION----</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment">//REQUIRED<sp/>to<sp/>initialize<sp/>the<sp/>library</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>load<sp/>an<sp/>Object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>create<sp/>a<sp/>dynamic<sp/>textbox</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>clone<sp/>(reload)<sp/>the<sp/>Object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>free<sp/>all<sp/>the<sp/>memory<sp/>allocated<sp/>by<sp/>the<sp/>library</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="comment">//----STAGE----</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>Get<sp/>the<sp/>STage<sp/>Width</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>Get<sp/>the<sp/>STage<sp/>Height</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>create/size<sp/>a<sp/>new<sp/>stage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>set<sp/>the<sp/>stage<sp/>border<sp/>visibility<sp/>(enabled<sp/>by<sp/>default,<sp/>for<sp/>developers)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment">//----REFRESH----</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>render<sp/>the<sp/>scene</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>render<sp/>to<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>render<sp/>to<sp/>a<sp/>printf()<sp/>sequence,<sp/>waiting<sp/>for<sp/>i<sp/>milliseconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>move<sp/>the<sp/>cursor<sp/>to<sp/>a<sp/>certain<sp/>x<sp/>y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment">//----TEXT----</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>change<sp/>a<sp/>textbox&apos;s<sp/>content,<sp/>works<sp/>for<sp/>every<sp/>Object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="comment">//----LOOK----</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>Get<sp/>the<sp/>Object&apos;s<sp/>current<sp/>Sprite<sp/>Number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>Get<sp/>the<sp/>Object&apos;s<sp/>VISIBILITY<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>Get<sp/>the<sp/>Object&apos;s<sp/>LAYER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>show<sp/>the<sp/>Object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>hide<sp/>the<sp/>Object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>set<sp/>the<sp/>Object&apos;s<sp/>visibility<sp/>(1/0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>move<sp/>the<sp/>Object<sp/>to<sp/>the<sp/>top<sp/>layer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>move<sp/>the<sp/>Object<sp/>to<sp/>the<sp/>bottom<sp/>layer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>move<sp/>the<sp/>Object<sp/>up<sp/>a<sp/>layer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>move<sp/>the<sp/>Object<sp/>down<sp/>a<sp/>layer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>switch<sp/>to<sp/>the<sp/>Object&apos;s<sp/>next<sp/>Sprite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>switch<sp/>to<sp/>the<sp/>Object&apos;s<sp/>precedent<sp/>Sprite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>switch<sp/>to<sp/>the<sp/>Object&apos;s<sp/>n<sp/>Sprite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment">//----PEN----</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>Get<sp/>the<sp/>Object&apos;s<sp/>PEN<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>Get<sp/>the<sp/>PEN<sp/>CHaracter<sp/>in<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>Get<sp/>the<sp/>PEN<sp/>SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>set<sp/>the<sp/>pen<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>set<sp/>the<sp/>pen<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>disable<sp/>the<sp/>Object&apos;s<sp/>pen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>enable<sp/>the<sp/>Object&apos;s<sp/>pen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>set<sp/>the<sp/>Object&apos;s<sp/>pen<sp/>(1/0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>stamp<sp/>the<sp/>Object<sp/>on<sp/>the<sp/>pen<sp/>layer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>shift<sp/>the<sp/>pen<sp/>layer<sp/>by<sp/>m<sp/>direction<sp/>m=0:left<sp/>m=1:right<sp/>m=2:top<sp/>m=3:down</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>set<sp/>the<sp/>pen<sp/>layer<sp/>to<sp/>a<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>clear<sp/>the<sp/>pen<sp/>layer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment">//----MOVE----</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>Get<sp/>the<sp/>Object&apos;s<sp/>x<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>Get<sp/>the<sp/>Object&apos;s<sp/>y<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>know<sp/>if<sp/>two<sp/>Objects<sp/>are<sp/>touching<sp/><sp/>(d=0<sp/>to<sp/>check<sp/>for<sp/>any<sp/>Object)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>know<sp/>if<sp/>the<sp/>Object<sp/>is<sp/>touching<sp/>a<sp/>Character<sp/>(d=0<sp/>to<sp/>check<sp/>for<sp/>border)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>move<sp/>the<sp/>Object<sp/>to<sp/>x<sp/>y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>move<sp/>the<sp/>Object<sp/>to<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>move<sp/>the<sp/>Object<sp/>to<sp/>y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>change<sp/>the<sp/>Object&apos;s<sp/>x<sp/>position<sp/>by<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>change<sp/>the<sp/>Object&apos;s<sp/>y<sp/>position<sp/>by<sp/>y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>move<sp/>the<sp/>Object&apos;s<sp/>corner<sp/>to<sp/>his<sp/>current<sp/>position<sp/>(useful<sp/>with<sp/>textboxes)<sp/>m=0:top-left<sp/>m=1:top-right<sp/>m=2:bottom-left<sp/>m=3:bottom-right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">//----DEBUG----</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>show<sp/>your<sp/>program<sp/>general<sp/>status</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>show<sp/>the<sp/>status<sp/>of<sp/>all<sp/>the<sp/>loaded<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>show<sp/>the<sp/>oject&apos;s<sp/>status</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="comment">//to<sp/>render<sp/>x<sp/>and<sp/>y<sp/>axes</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="include/visualt/visualt.h"/>
  </compounddef>
</doxygen>
